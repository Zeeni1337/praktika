from models.Access_Log import Access_Log

def get_all_access_logs():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–∞"""
    return Access_Log.get_all()

def get_access_log_by_id(log_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å—å –∂—É—Ä–Ω–∞–ª–∞ –ø–æ ID"""
    return Access_Log.get_by_id(log_id)

def manage_access_events(order_id):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
    while True:
        print("\n=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–∞ ===")
        logs = get_all_access_logs()
        
        if not logs:
            print("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ.")
        else:
            for log in logs:
                print(f"{log.log_id}. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {log.employee_id} | "
                      f"–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {log.access_point_id} | "
                      f"–î–∞—Ç–∞: {log.date} {log.time} | "
                      f"–¢–∏–ø: {'–í—Ö–æ–¥' if log.event_id == 1 else '–í—ã—Ö–æ–¥'}")

        print("\n1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–∞üò∂‚Äçüå´Ô∏è")
        print("2. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—åü§©")
        print("3. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å‚úåÔ∏è")
        print("0. –ù–∞–∑–∞–¥ü§Ø")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:üôÉ ")

        if choice == "1":
            print("\n=== –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–∞ ===")
            try:
                new_log = Access_Log(
                    employee_id=int(input("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ")),
                    access_point_id=int(input("ID —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞: ")),
                    event_id=int(input("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è (1-–í—Ö–æ–¥, 2-–í—ã—Ö–æ–¥): ")),
                    date=input("–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): "),
                    time=input("–í—Ä–µ–º—è (–ß–ß:–ú–ú): ")
                )
                new_log.save()
                print("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!")

        elif choice == "2":
            try:
                log_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                log = get_access_log_by_id(log_id)
                if log:
                    log.delete()
                    print("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
                else:
                    print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø–∏—Å–∏!")

        elif choice == "3":
            try:
                log_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "))
                log = get_access_log_by_id(log_id)
                if log:
                    print("\n–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å")
                    new_event = input(f"–ù–æ–≤—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è [{log.event_id}]: ")
                    new_date = input(f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ [{log.date}]: ")
                    new_time = input(f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è [{log.time}]: ")

                    if new_event: log.event_id = int(new_event)
                    if new_date: log.date = new_date
                    if new_time: log.time = new_time
                    
                    log.save()
                    print("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                else:
                    print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!")

        elif choice == "0":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")

def menu_orders():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    while True:
        print("\n=== –ñ—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ ===")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏üòò")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—åü§Ø")
        print("3. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—åüò±")
        print("4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –¥–æ—Å—Ç—É–ø–∞üë∫")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüôâ")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:ü¶ç ")
        
        if choice == "1":
            logs = get_all_access_logs()
            print("\n–í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–∞:")
            for log in logs:
                print(f"{log.log_id}: –°–æ—Ç—Ä.ID {log.employee_id} | "
                      f"–¢–æ—á–∫–∞ {log.access_point_id} | {log.date} {log.time}")

        elif choice == "2":
            print("\n=== –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å ===")
            try:
                new_log = Access_Log(
                    employee_id=int(input("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ")),
                    access_point_id=int(input("ID —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞: ")),
                    event_id=int(input("–¢–∏–ø (1-–í—Ö–æ–¥, 2-–í—ã—Ö–æ–¥): ")),
                    date=input("–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): "),
                    time=input("–í—Ä–µ–º—è (–ß–ß:–ú–ú): ")
                )
                new_log.save()
                print("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!")

        elif choice == "3":
            try:
                log_id = int(input("ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                log = get_access_log_by_id(log_id)
                if log:
                    log.delete()
                    print("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
                else:
                    print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø–∏—Å–∏!")

        elif choice == "4":
            try:
                order_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: "))
                manage_access_events(order_id)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞!")

        elif choice == "0":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")